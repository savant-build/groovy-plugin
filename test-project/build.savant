/*
 * Copyright (c) 2014-2022, Inversoft Inc., All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */
import org.savantbuild.dep.DefaultDependencyService
import org.savantbuild.dep.DependencyService
import org.savantbuild.dep.graph.ResolvedArtifactGraph
import org.savantbuild.domain.Project
import org.savantbuild.output.Output
import org.savantbuild.runtime.BuildFailureException

import java.nio.file.*
import java.nio.file.attribute.BasicFileAttributes
import java.util.function.Function
import java.util.function.Predicate
import java.util.stream.Collectors

class JavaLayout {
  def buildDir = Paths.get("build")
  def buildMainClassDir = buildDir.resolve("classes/main")
  def buildTestClassDir = buildDir.resolve("classes/test")
  def mainSrcDir = Paths.get("src/main/java")
  def mainResourceDir = Paths.get("src/main/resources")
  def testSrcDir = Paths.get("src/test/java")
  def testResourceDir = Paths.get("src/test/resources")
}

class JavaSettings {
  String version
  String compilerArguments = ""
  DependencyService.TraversalRules mainDependencyResolveConfiguration = new DependencyService.TraversalRules()
      .with("compile", new DependencyService.TraversalRules.GroupTraversalRule(true, false))
  DependencyService.TraversalRules testDependencyResolveConfiguration = new DependencyService.TraversalRules()
      .with("compile", new DependencyService.TraversalRules.GroupTraversalRule(true, false))
}

class JavaPlugin {
  def layout = new JavaLayout()
  def settings = new JavaSettings()
  def properties = new Properties()
  def project
  def output

  def JavaPlugin(Project project, Output output, Path propertiesFile) {
    this.project = project
    this.output = output

    if (Files.isRegularFile(propertiesFile)) {
      propertiesFile.toFile().withInputStream { inputStream ->
        properties.load(inputStream)
      }
    } else {
      fail("You must create a file at [${propertiesFile}] that contains the system configuration for the Java plugin. " +
          "This file should include the location of the JDK (java and javac) by version. These properties look like this:\n\n" +
          "  1.6=/Library/Java/JavaVirtualMachines/1.6.0_65-b14-462.jdk/Contents/Home\n" +
          "  1.7=/Library/Java/JavaVirtualMachines/jdk1.7.0_10.jdk/Contents/Home\n" +
          "  1.8=/Library/Java/JavaVirtualMachines/jdk1.8.0.jdk/Contents/Home\n")
    }
  }

  def clean() {
    Path buildDir = project.directory.resolve(layout.buildDir)
    output.info "Cleaning [${buildDir}]"
    if (!Files.isDirectory(buildDir)) {
      return
    }

    if (Files.isSymbolicLink(buildDir)) {
      Files.delete(buildDir);
    }

    Files.walkFileTree(buildDir, new SimpleFileVisitor<Path>() {
      public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
        Files.delete(dir);
        return FileVisitResult.CONTINUE;
      }

      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
        Files.delete(file);
        return FileVisitResult.CONTINUE;
      }
    })
  }

  def compileMain() {
    Path javacPath = initialize()
    List<String> javaFilesToCompile = determineJavaFilesToCompile(layout.mainSrcDir, layout.buildMainClassDir)
    if (javaFilesToCompile.isEmpty()) {
      return
    }

    output.info "Compiling [${javaFilesToCompile.size()}] Java classes from [${layout.mainSrcDir}] to [${layout.buildMainClassDir}]"

    String command = "${javacPath} ${settings.compilerArguments} ${classpath(settings.mainDependencyResolveConfiguration)} -sourcepath ${layout.mainSrcDir} -d ${layout.buildMainClassDir} ${javaFilesToCompile.join(" ")}"
    Files.createDirectories(project.directory.resolve(layout.buildMainClassDir))
    Process process = command.execute(new String[0], project.directory.toFile())
    process.consumeProcessOutput((Appendable) System.out, System.err)
    process.waitFor()

    int exitCode = process.exitValue()
    if (exitCode != 0) {
      fail("Build failed")
    }
  }

  def compileTest() {
    Path javacPath = initialize()
    String command = "${javacPath} ${settings.compilerArguments} ${classpath(settings.testDependencyResolveConfiguration)} -sourcepath ${layout.testSrcDir} -d ${layout.buildTestClassDir}"
    Process process = command.execute(new String[0], project.directory.toFile())
    process.consumeProcessOutput((Appendable) System.out, System.err)
    process.waitFor()
    if (!process.exitValue()) {
      fail("Build failed")
    }
  }

  private List<String> determineJavaFilesToCompile(Path sourceDir, Path outputDir) {
    Path projectSourceDir = project.directory.resolve(sourceDir)
    if (!Files.isDirectory(projectSourceDir)) {
      output.warning "Source directory [${projectSourceDir.toString()}] does not exist. Skipping compilation"
      return Collections.emptyList()
    }

    return Files.walk(projectSourceDir).filter({ Path path ->
      Path outputFile = outputDir.resolve(path)
      return path.toString().endsWith(".java") && (!Files.isRegularFile(outputFile) || Files.getLastModifiedTime(outputFile) < Files.getLastModifiedTime(path))
    } as Predicate).map({ path -> path.subpath(project.directory.getNameCount(), path.getNameCount()).toString() } as Function).collect(Collectors.toList())
  }

  private String classpath(DependencyService.TraversalRules resolveConfiguration) {
    if (!project.dependencies) {
      return ""
    }

    DependencyService service = new DefaultDependencyService(output)
    if (!project.artifactGraph) {
      def dependencyGraph = service.buildGraph(project.toArtifact(), project.dependencies, project.workflow)
      project.artifactGraph = service.reduce(dependencyGraph)
    }

    ResolvedArtifactGraph resolvedArtifactGraph = service.resolve(project.artifactGraph, project.workflow, resolveConfiguration)
    return "-classpath ${resolvedArtifactGraph.toClasspath()}"
  }

  private Path initialize() {
    if (!settings.version) {
      fail("You must configure the Java version to use with the settings object. It will look something like this:\n\n" +
          "  java.settings.version=\"1.7\"")
    }

    String javaHome = properties.getProperty(settings.version)
    if (!javaHome) {
      fail("No JDK is configured for version [${settings.version}]. You must configure the JDK locations in the " +
          "~/.savant/java-plugin.properties file. It will look something like this:\n\n" +
          "  1.6=/Library/Java/JavaVirtualMachines/1.6.0_65-b14-462.jdk/Contents/Home\n" +
          "  1.7=/Library/Java/JavaVirtualMachines/jdk1.7.0_10.jdk/Contents/Home\n" +
          "  1.8=/Library/Java/JavaVirtualMachines/jdk1.8.0.jdk/Contents/Home\n")
    }

    def javacPath = Paths.get(javaHome, "bin/javac")
    if (!Files.isRegularFile(javacPath)) {
      fail("The javac compiler [${javacPath.toAbsolutePath()}] does not exist.")
    }
    if (!Files.isExecutable(javacPath)) {
      fail("The javac compiler [${javacPath.toAbsolutePath()}] is not executable.")
    }

    return javacPath
  }

  static def fail(message) {
    throw new BuildFailureException(message)
  }
}


project(name: "test-project", group: "org.savantbuild.test", version: "0.1", license: "Commercial") {
  workflow {
    fetch {
      cache()
      url(url: "http://repository.savantbuild.org")
    }
    publish {
      cache()
    }
  }
}

def java = new JavaPlugin(project, Paths.get("${SYS['user.home']}/.savant/plugins/java.properties"))
java.settings.version = "1.7"

target(name: "clean", description: "Cleans the project") {
  java.clean()
}

target(name: "compile", description: "Compile the java") {
  java.compileMain()
//  java.compileTest()
}